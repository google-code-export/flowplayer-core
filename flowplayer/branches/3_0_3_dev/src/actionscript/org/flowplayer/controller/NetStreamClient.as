/*     *    Copyright 2008 Anssi Piirainen * *    This file is part of FlowPlayer. * *    FlowPlayer is free software: you can redistribute it and/or modify *    it under the terms of the GNU General Public License as published by *    the Free Software Foundation, either version 3 of the License, or *    (at your option) any later version. * *    FlowPlayer is distributed in the hope that it will be useful, *    but WITHOUT ANY WARRANTY; without even the implied warranty of *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *    GNU General Public License for more details. * *    You should have received a copy of the GNU General Public License *    along with FlowPlayer.  If not, see <http://www.gnu.org/licenses/>. */package org.flowplayer.controller {	import org.flowplayer.util.Log;		import org.flowplayer.config.Config;	import org.flowplayer.controller.NetStreamCallbacks;	import org.flowplayer.model.Clip;	import org.flowplayer.model.ClipEventType;		/**	 * @author api	 */	internal class NetStreamClient implements NetStreamCallbacks {		private var log:Log = new Log(this);		private var _config:Config;		private var _clip:Clip;		private var _metadataDispatched:Boolean;		public function NetStreamClient(clip:Clip, config:Config) {			_clip = clip;			_config = config;		} 		public function onMetaData(infoObject:Object):void {			log.info("onMetaData, current clip " + _clip);						if (_clip.metaData) {				dispatchMetaData();				return;			}			log.debug("onMetaData, data for clip " + _clip + ":");			var metaData:Object = new Object();			for (var key:String in infoObject) {				log.debug(key + ": " + infoObject[key]);				metaData[key] = infoObject[key];			}			_clip.metaData = metaData;						if (metaData.cuePoints) {				log.debug("clip has embedded cuepoints");				_clip.addCuepoints(_config.createCuepoints(metaData.cuePoints, "embedded", _clip.cuepointMultiplier));			}			dispatchMetaData();		}		private function dispatchMetaData():void {			if (!_metadataDispatched) {				_clip.dispatch(ClipEventType.METADATA);			}			_metadataDispatched = true;		}				public function onCuePoint(infoObject:Object):void {		}				public function onXMPData(infoObject:Object):void {		}				public function onBWDone():void {		}				public function onCaption(cps:String, spk:Number):void {		}				public function onCaptionInfo(obj:Object):void {		}				public function onFCSubscribe(obj:Object):void {		}				public function onLastSecond(infoObject:Object):void {		}				public function onPlayStatus(infoObject:Object):void {		}				public function onImageData(obj:Object):void {		}				public function RtmpSampleAccess(obj:Object):void {		}				public function onTextData(obj:Object):void {		}	}}