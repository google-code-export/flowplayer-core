/*    
 *    Copyright 2008 Anssi Piirainen
 *
 *    This file is part of FlowPlayer.
 *
 *    FlowPlayer is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    FlowPlayer is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with FlowPlayer.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.flowplayer.controller {
	import org.flowplayer.model.PlayEventType;	
	
	import flash.events.TimerEvent;
	import flash.media.SoundTransform;
	import flash.net.NetStream;
	import flash.net.SharedObject;
	import flash.utils.Timer;
	
	import org.flowplayer.model.Playlist;
	import org.flowplayer.util.Log;		

	/**
	 * @author api
	 */
	internal class VolumeController {

		private var log:Log = new Log(this);
		private var _soundTransform:SoundTransform;
		private var _netStream:NetStream;
		private var _storedVolume:SharedObject;
		private var _storeDelayTimer:Timer;
		private var _playList:Playlist;
		private var _muted:Boolean;

		public function VolumeController(playList:Playlist) {
			_playList = playList;
			_soundTransform = new SoundTransform();
			restoreVolume();
			_storeDelayTimer = new Timer(2000, 1);
			_storeDelayTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerDelayComplete);
		}

		public function set netStream(netStream:NetStream):void {
			_netStream = netStream;
			if (_muted)
				_netStream.soundTransform = new SoundTransform(0);
			else
				_netStream.soundTransform = _soundTransform;
		}

		public function mute(persistMuteSetting:Boolean = true):void {
			log.debug("muting volume");
			if (_netStream)
				_netStream.soundTransform = new SoundTransform(0);
			dispatchEvent(PlayEventType.MUTE);
			_muted = true;
			if (persistMuteSetting)
				storeVolume(true);
		}

		public function unMute():Number {
			log.debug("unmuting volume to level " + _soundTransform.volume);
			if (_netStream)
				_netStream.soundTransform = _soundTransform;
			dispatchEvent(PlayEventType.UNMUTE);
			_muted = false;
			return volume;
		}

		public function set volume(volume:Number):void {
			_soundTransform.volume = volume;
			if (!_muted && _netStream)
				_netStream.soundTransform = _soundTransform;
			if (!_storeDelayTimer.running) {
				log.info("starting delay timer");
				_storeDelayTimer.start();
			}
		}

		public function get volume():Number {
			return _soundTransform.volume;
		}

		private function onTimerDelayComplete(event:TimerEvent):void {
			storeVolume();
		}
		
		private function storeVolume(muted:Boolean = false):void {
			log.info("persisting volume level");
			_storeDelayTimer.stop();
			_storedVolume.data.volume = _soundTransform.volume;
			_storedVolume.data.volumeMuted = muted;
			_storedVolume.flush();
		}
		
		private function restoreVolume():void {
			_storedVolume = SharedObject.getLocal("org.flowplayer");
			_soundTransform.volume = _storedVolume.data.volume;
			if (_storedVolume.data.volumeMuted)
				mute(false);
		}
		
		private function get storedVolume():Number {
			return _soundTransform.volume;
		}
		
		private function dispatchEvent(event:PlayEventType):void {
			_playList.current().dispatchEvent(new ControllerEvent(event));
		}
	}
}
